var f=Object.defineProperty;var m=(r,e,t)=>e in r?f(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var l=(r,e,t)=>m(r,typeof e!="symbol"?e+"":e,t);function i(r){return new Promise((e,t)=>{r.oncomplete=r.onsuccess=()=>e(r.result),r.onabort=r.onerror=()=>t(r.error)})}function w(r,e){const t=indexedDB.open(r);t.onupgradeneeded=()=>t.result.createObjectStore(e);const a=i(t);return(n,s)=>a.then(o=>s(o.transaction(e,n).objectStore(e)))}let c;function h(){return c||(c=w("keyval-store","keyval")),c}function y(r,e=h()){return e("readonly",t=>i(t.get(r)))}function R(r,e,t=h()){return t("readwrite",a=>(a.put(e,r),i(a.transaction)))}function I(r,e=h()){return e("readwrite",t=>(t.delete(r),i(t.transaction)))}const u=typeof indexedDB>"u"?localStorage:{getItem:async r=>await y(r)??null,setItem:async(r,e)=>await R(r,e),removeItem:async r=>await I(r)},v=1e3*60*60;class E{async getCache(e){const t=await u.getItem(e);return t?JSON.parse(t):null}async setCache(e,t,a){const n={etag:t,value:a,expiredAt:Date.now()+v};await u.setItem(e,JSON.stringify(n))}async removeCache(e){await u.removeItem(e)}}class S{constructor(){l(this,"storage",new E)}async handleRequest(e){const t=this.getCacheKey(e),a=await this.storage.getCache(t);if(a){if(a.expiredAt>Date.now())return this.createResponse(a.value,{limit:0,remaining:0});this.storage.removeCache(t)}const n={Accept:"application/vnd.github.v3+json"};e.token&&(n.Authorization=`Bearer ${e.token}`),a!=null&&a.etag&&(n["If-None-Match"]=a.etag);try{const s=await this.fetchData(e,n),o={limit:parseInt(s.headers.get("X-Ratelimit-Limit")||"0"),remaining:parseInt(s.headers.get("X-Ratelimit-Remaining")||"0")};if(s.status===304&&a)return this.createResponse(a.value,o);if(!s.ok)throw new Error(`GitHub API request failed: ${s.status}`);const d=await s.json(),g=this.parseResponse(d),p=s.headers.get("ETag");return p&&await this.storage.setCache(t,p,g),this.createResponse(g,o)}catch(s){return this.createErrorResponse(s.message)}}createResponse(e,t){return{data:e,rateLimit:t}}createErrorResponse(e){return{error:e}}}const b=/\.(png|jpe?g|gif|webp|svg)$/i;class C extends S{getCacheKey(e){return`${e.owner}/${e.repo}/${e.ref}`}fetchData({owner:e,repo:t,ref:a},n){return fetch(`https://api.github.com/repos/${e}/${t}/git/trees/${a}?recursive=1`,{headers:n})}parseResponse(e){return e.tree.reduce((t,{path:a,type:n})=>(n==="blob"&&b.test(a)&&t.push(a),t),[])}}const k=new C;self.onmessage=async r=>{const e=await k.handleRequest(r.data);self.postMessage(e)};
